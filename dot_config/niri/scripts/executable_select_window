#!/usr/bin/env python3
import re
import subprocess
import sys
from dataclasses import dataclass
from typing import List, Optional

@dataclass
class Window:
    idx: int
    id: int
    ws: int
    app_id: str
    title: str

    def display(self) -> str:
        return f"{self.idx:2d} â”‚ {self.app_id}"

def get_windows() -> List[Window]:
    try:
        result = subprocess.run(
            ["niri", "msg", "windows"],
            capture_output=True,
            text=True,
            check=True
        )
    except subprocess.CalledProcessError:
        return []

    windows = []
    blocks = result.stdout.split("\n\n")
    
    for block in blocks:
        if not block.strip():
            continue
        
        id_match = re.search(r"Window ID (\d+):", block)
        title_match = re.search(r'Title: "(.*?)"', block)
        app_match = re.search(r'App ID: "(.*?)"', block)
        ws_match = re.search(r"Workspace ID: (\d+)", block)
        
        if id_match and title_match and app_match and ws_match:
            windows.append(Window(
                idx=0,
                id=int(id_match.group(1)),
                ws=int(ws_match.group(1)),
                app_id=app_match.group(1),
                title=title_match.group(1)
            ))
    
    for i, w in enumerate(windows, 1):
        w.idx = i
    
    return windows

def select_window(windows: List[Window]) -> Optional[int]:
    if not windows:
        return None
    
    menu = "\n".join(w.display() for w in windows)
    res = subprocess.run(
        ["fuzzel", "--dmenu", "--no-icons", "--index", "--width", "40", "--font=JetBrainsMono Nerd Font:size=20"],
        input=menu,
        capture_output=True,
        text=True
    )
    
    if not res.stdout:
        return None
    
    try:
        idx = int(res.stdout.strip())
        return windows[idx].id
    except (ValueError, IndexError):
        return None

def main() -> None:
    windows = get_windows()
    if not windows:
        sys.exit(0)
    
    if window_id := select_window(windows):
        subprocess.run(["niri", "msg", "action", "focus-window", "--id", str(window_id)], check=False)

if __name__ == "__main__":
    main()
